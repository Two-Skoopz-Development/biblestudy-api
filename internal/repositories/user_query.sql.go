// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllUsers = `-- name: GetAllUsers :many
Select fname, lname, email, phone_number, is_admin from Users
`

type GetAllUsersRow struct {
	Fname       pgtype.Text `json:"fname"`
	Lname       pgtype.Text `json:"lname"`
	Email       pgtype.Text `json:"email"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	IsAdmin     pgtype.Bool `json:"is_admin"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.Fname,
			&i.Lname,
			&i.Email,
			&i.PhoneNumber,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByClerkID = `-- name: GetUserByClerkID :one
Select fname, lname, email, phone_number, is_admin, bible_id from Users
where clerk_id = $1 limit 1
`

type GetUserByClerkIDRow struct {
	Fname       pgtype.Text `json:"fname"`
	Lname       pgtype.Text `json:"lname"`
	Email       pgtype.Text `json:"email"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	IsAdmin     pgtype.Bool `json:"is_admin"`
	BibleID     pgtype.Int4 `json:"bible_id"`
}

func (q *Queries) GetUserByClerkID(ctx context.Context, clerkID pgtype.Text) (GetUserByClerkIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByClerkID, clerkID)
	var i GetUserByClerkIDRow
	err := row.Scan(
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.PhoneNumber,
		&i.IsAdmin,
		&i.BibleID,
	)
	return i, err
}
